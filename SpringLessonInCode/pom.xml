<?xml version="1.0" encoding="UTF-8"?>

<!-- #
	 # Maven Basics
	 # 
	 # Lifecycle Phases 
	 # ================
	 # prepare-resources - Copy resources required for project. Resource copying can be customized.
	 # validate - validate if everything in project is correct for running a build. 
	 # compile - compile resources to generate classes
	 # test - Run test cases for the project in /src/main/test folder
	 # package - create packaged solution (jar/war) based on package definition in pom.xml
	 # install - install build into local/maven repository
	 # deploy - deploy application in central maven repository
	 # 
	 #
	 # Goals
	 # =====
	 # They are used with lifecycle phase to carry out tasks. There is a pre and post hook for each 
	 # goal that allows executing custom tasks before and after goal execution. These custom tasks
	 # should be defined in execution > phase > goal > configuration > task of maven plugin. Along 
	 # with hooks, even the goal can be customized in similar fashion.
	 #
	 # clean - remove previously generated artifacts (classes and package) by deleting build directory.
	 # default/build - build current project. There are 21 lifecycle stages for build (!!)
	 # site - create fresh documentation, site using this phase 
	 # 
	 #
	 # Profiles 
	 # ========
	 # Profiles are used to created separate build configurations for different environments like 
	 # dev, staging, production, etc. Profiles can be built at different levels -
	 #
	 # project - provide details in pom.xml
	 # user - provide details in usr/.m2/settings.xml
	 # system - provide details in mvn/conf/settings.xml
	 #
	 # Declare separate profile values in env.[xxx].properties file in src/main/resources.
	 # Activate profile either by setting <activeProfile> or <env> tags in settings.xml
	 #
	 # -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!-- # 
	 # Maven follows hierarchical system of dependencies. Child dependency inherits details from parent. 
	 # parent tag defines the parent dependency for current maven project. 
	 # Only depedencies declared explicitly here would be included in build (ignoring whats declared 
	 # otherwise in parent). Version number is inhertied from parent. 
	 # -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.5.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	
	<!-- #
	 # This section declares details for current project that are used to publish it when the project is
	 # installed in a repository.
	 # 
	 # Version: Useful in code build and release process. Both github and maven use it equally to tag 
	 # and install major/minor releases for project. 
	 #
	 # Packaging: Defines packaging method of the project (jar/war). This predominantly defines the folder
	 # structure and what files go where when the project is built. 
	 # -->
	<groupId>learn.axemandev</groupId>
	<artifactId>SpringLessonInCode</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>SpringLessonInCode</name>
	<description>Learn Spring From Code Comments</description>

	<!-- #
	 # Properties define variables that can be used in other places in build definition using 
	 # ${property_name} reference. There are pre-defined properties like java.version that only need
	 # declaration and override the existing values in parent file. Users can define their own custom
	 # properties and use it here, e.g. 
	 # <spring.version>5.0.1</spring.version>
	 # Usage: <version>${spring.version}</version> 
	 # -->
	<properties>
		<java.version>1.8</java.version>
	</properties>

	<!-- #
	 # Dependencies define which jar files are required for this project and at which level/stage.
	 # These jars are imported from Maven's central repository. The sequence of import is always 
	 # local first. Custom or third party repositories (like artifactory) can be defined for both 
	 # snapshot(dev) and release(prod) versions which then overrides central repository for lookup. 
	 # These custom repositories manage dependencies through Maven central on their own.  
	 # -->
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<!-- #
	 # TODO repository
	 # -->
	 
	<!-- #
	 # TODO scm
	 # -->	 

	<!-- #
	 #
	 # Plugins are defined under build.
	 # 
	 # Plugin Management provides similar parent-child hierarchy for plugs like for dependencies.
	 # -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	
	<!-- #
	 # 
	 # Plugin Repository _ can be used if plugins are defined and need to be pulled from a different
	 # location.
	 # -->

</project>
